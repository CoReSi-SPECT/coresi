data_file: /home/lequertier/projects/coresi_git/CodeC++/CC_CLARYS_7P_IECPhantom_Cylinders_4Energies_t5000s_Ideal_140keVPeak.dat
log_dir: 'logs'
data_type: 'MACACO'
# Energy of the source. If set to -1 the gamma energy is the deposited energy i.e. E1 + E2
E0: [140,245, 364, 511]

n_events: 1000
starts_at: 0

# Ethres = 5 pour données idéales, Ethres = 50 pour resolution finie des d
# tecteurs.
# (valeurs Enrique, mais devrait être choisi en fonction de la résolution
# des détecteurs)
energy_threshold: 5
remove_out_of_range_energies: False
# Only needed if E0 is unknown and remove_out_of_range_energies is True, ignored
# otherwise
energy_range: [120, 150]


# Cameras have scatterer layers normal on z axis, centered on the z axis, below the source
# Up to 5 absorbers are implemented
cameras:
  n_cameras: 2
    # Cameras scatterer have the same characteristics besides their positions
  common_attributes:
    n_sca_layers: 7
    sca_material: Si
    abs_material: Si
    sca_layer_0:
      center: [0, 0, -10]
      size: [9.0, 9.0, 0.2]
    sca_layer_1:
      center: [0, 0, -11]
      size: [9.0, 9.0, 0.2]
    sca_layer_2:
      center: [0, 0, -12]
      size: [9.0, 9.0, 0.2]
    sca_layer_3:
      center: [0, 0, -13]
      size: [9.0, 9.0, 0.2]
    sca_layer_4:
      center: [0, 0, -14]
      size: [9.0, 9.0, 0.2]
    sca_layer_5:
      center: [0, 0, -15]
      size: [9.0, 9.0, 0.2]
    sca_layer_6:
      center: [0, 0, -16]
      size: [9.0, 9.0, 0.2]

    n_absorbers: 5

    # if an absorber layer is missing, define it as None
    # For example, abs_layer_1: None
    abs_layer_0: # bottom
      center: [0, 0, -31.0]
      size: [28.0, 21.0, 3]
    abs_layer_1: # front
      center: [9, 0, -13.0]
      size: [5.0, 5.0, 5.0]
    abs_layer_2: # rear
      center: [-9, 0, -13.0]
      size: [5.0, 5.0, 5.0]
    abs_layer_3: # right
      center: [0, -9, -13.0]
      size: [5.0, 5.0, 5.0]
    abs_layer_4: # left
      center: [0, 9, -13.0]
      size: [5.0, 5.0, 5.0]

  position_0:
    frame_origin: [0, 0, 0]
    Ox: [1, 0, 0]    # parallel to scatterer edge
    Oy: [0, 1, 0]    # parallel to scatterer edge
    Oz: [0, 0, 1]    # orthogonal to the camera, tw the source
  position_1:
    frame_origin: [0, 0, 0]
    Ox: [1, 0, 0]    # parallel to scatterer edge
    Oy: [0, 0, -1]   # parallel to scatterer edge
    Oz: [0, 1, 0]    # orthogonal to the camera, tw the source

volume:
  volume_dimensions: [20, 20, 0.4] # In centimeters
  n_voxels: [100, 100, 1]
  volume_centre: [0, 0, 0]

lm_mlem:
  cone_thickness: 'angular' # angular, angular_precise or parallel
  model: 'cos1rho2' # Either cos0rho0, cos0rho2 or cos1rho2
  last_iter: 2
  first_iter: 0
  save_every: 76
  checkpoint_dir: checkpoints
  n_sigma: 2 # Skip the Gaussian above n_sigma * Gaussian std
  width_factor: 1 # Used to artificially modify the spread of the cone
  sensitivity: true
  sensitivity_model: solid_angle # from less precise to more precise: solid_angle, solid_angle_with_attn, like_system_matrix
  sensitivity_point_samples: 0.25 # Used to compute the sensitivity for a coarser volume with less voxels. Set to 1 o disable
  # Supply a sensitivity file. Needs to have the same size as the volume
  # sensitivity_file: /home/lequertier/projects/coresi_git/CodeC++/IECPhantomSens_7sca_50voxXY_1voxZ_4nE_140_245_364_511_keV_ValenciaModel_Eslice_0.raw
  tv: true
  alpha_tv: 0.1
